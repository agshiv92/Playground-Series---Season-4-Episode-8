{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-05T02:26:55.665691Z","iopub.execute_input":"2024-08-05T02:26:55.666036Z","iopub.status.idle":"2024-08-05T02:26:56.652136Z","shell.execute_reply.started":"2024-08-05T02:26:55.666008Z","shell.execute_reply":"2024-08-05T02:26:56.651156Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e8/sample_submission.csv\n/kaggle/input/playground-series-s4e8/train.csv\n/kaggle/input/playground-series-s4e8/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"<div style=\"border-radius:10px; padding: 12px; background-color: #ffffff; font-size:130%; text-align:left\">\n<h2 align=\"left\"><font color=#E1B12D>Introduction</font></h2>\n    \n**Welcome to the 2024 Kaggle Playground Series, Season 4, Episode 8!**\n    \n   \n\n**Problem Statement:**\nIn this competition, your task is to predict whether a mushroom is edible or poisonous based on its physical characteristics. Mushrooms come in various shapes, sizes, and colors, and some of them are safe to eat while others are highly toxic. By accurately classifying mushrooms, we can help ensure the safety of mushroom foragers and enthusiasts.\n\n**Objective:**\nThe main objective is to develop a machine learning model that can classify mushrooms as either edible or poisonous. You'll be working with a dataset that includes various physical characteristics of mushrooms, such as cap shape, color, and gill size. Your goal is to use these features to make accurate predictions.\n\n**Evaluation Metric:**\nSubmissions will be evaluated using the Matthews correlation coefficient (MCC). The MCC is a measure of the quality of binary classifications. It takes into account true and false positives and negatives and is generally regarded as a balanced measure, even if the classes are of very different sizes. The MCC value ranges from -1 to +1:\n- A coefficient of +1 represents a perfect prediction.\n- 0 indicates no better than random prediction.\n- -1 indicates total disagreement between prediction and observation.\n\nThe MCC is calculated as follows:\n\n![image.png](attachment:4ca23720-24b1-45a3-b321-0420f6772aeb.png)\n\nWhere:\n- TP = True Positives\n- TN = True Negatives\n- FP = False Positives\n- FN = False Negatives\n","metadata":{},"attachments":{"4ca23720-24b1-45a3-b321-0420f6772aeb.png":{"image/png":""}}},{"cell_type":"markdown","source":"<h2 align=\"left\"><font color=#E1B12D>Approach</font></h2>\n\n<a id=\"toc\"></a>\n- [1.1 Import Libraries](#1.1)\n- [1.2 Configuration](#1.2)\n- [1.3 Important Functions](#1.3)\n- [1.4 Import Data](#1.4)\n- [1.5 Quick overview](#1.5)\n- [2. Exploratory Data Analysis ](#2)\n- [3.1 Feature Engineering](#3.1)\n- [3.2 Missing Data Handling](#3.2)\n- [3.3 Outlier Handling](#3.3)\n- [3.4 Feature Transformation](#3.4)\n- [3.5 Feature Creation](#3.5)\n- [3.6 Feature Selection](#3.6)\n- [4. Data Pipeline](#4)\n- [4.1 Pipeline Creation](#4.1)\n- [4.2 Visualizing the Pipeline ](#4.2)\n- [5. Model Building](#5)\n- [5.1 Train Test Split](#5.1)\n- [5.2 Training the Model](#5.2)\n- [5.3 Performance Evaluation](#5.3)\n- [5.4 Ensembling for Performance Improvement](#5.4)\n- [5.5 Model Explainability](#5.5)\n- [6. Model Infrence](#6)\n- [6.1 Loading the Model](#6.1)\n- [6.2 Data Loading and Prepration](#6.2)\n- [6.3 Model Forecasting](#6.3)","metadata":{}},{"cell_type":"markdown","source":"<a id=\"1.1\"></a>\n## <b>1.1 <span style='color:#E1B12D'>Import Libraries</span></b> ","metadata":{}},{"cell_type":"code","source":"!pip3 install -q dagshub\n!pip3 install -q mlflow","metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-08-05T02:26:56.653961Z","iopub.execute_input":"2024-08-05T02:26:56.654368Z","iopub.status.idle":"2024-08-05T02:27:39.515169Z","shell.execute_reply.started":"2024-08-05T02:26:56.654323Z","shell.execute_reply":"2024-08-05T02:27:39.514208Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ncudf 24.4.1 requires cubinlinker, which is not installed.\ncudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\ncudf 24.4.1 requires ptxcompiler, which is not installed.\ncuml 24.4.0 requires cupy-cuda11x>=12.0.0, which is not installed.\ndask-cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\nkeras-nlp 0.12.1 requires keras-core, which is not installed.\ntensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\naiobotocore 2.13.0 requires aiohttp<4.0.0,>=3.9.2, but you have aiohttp 3.9.1 which is incompatible.\naiobotocore 2.13.0 requires botocore<1.34.107,>=1.34.70, but you have botocore 1.29.165 which is incompatible.\ncudf 24.4.1 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.5.0 which is incompatible.\njupyterlab 4.2.1 requires httpx>=0.25.0, but you have httpx 0.23.3 which is incompatible.\njupyterlab 4.2.1 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\njupyterlab-lsp 5.1.0 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\nkfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\nkfp 2.5.0 requires requests-toolbelt<1,>=0.8.0, but you have requests-toolbelt 1.0.0 which is incompatible.\ntensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.3.3 which is incompatible.\nydata-profiling 4.6.4 requires dacite>=1.8, but you have dacite 1.6.0 which is incompatible.\nydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0m\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ncudf 24.4.1 requires cubinlinker, which is not installed.\ncudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\ncudf 24.4.1 requires ptxcompiler, which is not installed.\ncuml 24.4.0 requires cupy-cuda11x>=12.0.0, which is not installed.\ndask-cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\ntensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\ncudf 24.4.1 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.5.0 which is incompatible.\nkfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\nkfp 2.5.0 requires requests-toolbelt<1,>=0.8.0, but you have requests-toolbelt 1.0.0 which is incompatible.\ntensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.3.3 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"code","source":"# System related tasks\nimport os\nimport gc\nimport warnings\n\n# Data manipulation and numerical operations\nimport numpy as np \nimport pandas as pd  \nimport polars as pl\n\n# Data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\n\n# Scikit-learn model selection and evaluation\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, TimeSeriesSplit\nfrom sklearn.metrics import mean_squared_error, r2_score, roc_auc_score, accuracy_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin, clone\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, FunctionTransformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.metrics import matthews_corrcoef, make_scorer\n# Machine learning models\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, VotingRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\n\n# Gradient boosting frameworks\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom catboost import CatBoostClassifier, CatBoostRegressor\n\n# Optimization and utilities\nimport optuna\nimport joblib\nfrom kaggle_secrets import UserSecretsClient\n\n# For Feature Selection\nfrom sklearn.feature_selection import SelectKBest, chi2\n\n# Experiment tracking and collaboration\nimport dagshub\nimport mlflow\n\n# Model Explainability \nimport shap\n\n# Ensure warnings are ignored and plots are displayed inline\nwarnings.filterwarnings('ignore')\n","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-05T02:27:39.519678Z","iopub.execute_input":"2024-08-05T02:27:39.519958Z","iopub.status.idle":"2024-08-05T02:27:50.746813Z","shell.execute_reply.started":"2024-08-05T02:27:39.519925Z","shell.execute_reply":"2024-08-05T02:27:50.746007Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"1.2\"></a>\n## <b>1.2 <span style='color:#E1B12D'>Configuration</span></b> ","metadata":{}},{"cell_type":"code","source":"class CFG:\n    \"\"\"\n    Configuration class for parameters, models, paths, and cross-validation strategies.\n    Please use caps lock for variable names while filling in parameters.\n    \"\"\"\n    # Paths\n    BASE_PATH = \"/kaggle/input/playground-series-s4e8\"\n    TRAIN_PATH = f\"{BASE_PATH}/train.csv\"\n    TEST_PATH = f\"{BASE_PATH}/test.csv\"\n    \n    # Data Type Casting Settings to ensure smooth pipeline operation\n    DATA_TYPES = {\n        'Index': 'int64',\n        'ID': 'int64',\n        'Class': 'category',\n        'Cap_Diameter': 'float64',\n        'Cap_Shape': 'category',\n        'Cap_Surface': 'category',\n        'Cap_Color': 'category',\n        'Does_Bruise_or_Bleed': 'category',\n        'Gill_Attachment': 'category',\n        'Gill_Spacing': 'category',\n        'Gill_Color': 'category',\n        'Stem_Height': 'float64',\n        'Stem_Width': 'float64',\n        'Stem_Root': 'category',\n        'Stem_Surface': 'category',\n        'Stem_Color': 'category',\n        'Veil_Type': 'category',\n        'Veil_Color': 'category',\n        'Has_Ring': 'category',\n        'Ring_Type': 'category',\n        'Spore_Print_Color': 'category',\n        'Habitat': 'category',\n        'Season': 'category'\n    }\n    \n    # Selecting Categorical variables. High-dimensional variables are excluded\n    CATEGORICAL_VARIABLES = [\n    'cap-shape', 'cap-surface', 'cap-color', \n    'does-bruise-or-bleed', 'gill-attachment', 'gill-spacing', \n    'gill-color', 'stem-root', 'stem-surface', 'stem-color', \n    'veil-type', 'veil-color', 'has-ring', 'ring-type', \n    'spore-print-color', 'habitat', 'season'\n    ]\n\n    NUMERICAL_VARIABLES = [\n        'cap-diameter', 'stem-height', 'stem-width'\n        ]\n    \n    # Defining Target Variable \n    TARGET_VARIABLE = 'class'\n    \n    #loss function\n    def mcc_metric(y_pred, y_true):\n        y_true = y_true.astype(int)\n        y_pred = (y_pred > 0.5).astype(int)\n        mcc = matthews_corrcoef(y_true, y_pred)\n        return mcc\n    \n    # Model Settings to train the model with hyperparameters\n    MODELS = {\n        \"xgboost\": {\n            \"model\": XGBClassifier,\n            \"params\": {\n                'grow_policy': 'lossguide',\n                'multi_strategy': 'one_output_per_tree',\n                'learning_rate': 0.08328331858001327,\n                'gamma': 0.004835250985829998,\n                'subsample': 0.8859736601374597,\n                'colsample_bytree': 0.5888026455458519,\n                'max_depth': 13,\n                'min_child_weight': 1,\n                'lambda': 0.019400390218703555,\n                'alpha': 0.021729650485307506,\n                'n_estimators': 100,\n                'n_jobs': -1,\n                'random_state': 42,\n                'subsample': 0.802533192662325,\n                'verbosity': 0,\n                \"enable_categorical\": True, \n                \"objective\": 'binary:logistic', \n                \"booster\": 'gbtree',\n                'early_stopping_rounds': 10,\n                'tree_method': 'gpu_hist'  # Use GPU acceleration\n            }\n        },\n        \"catboost\": {\n            \"model\": CatBoostClassifier,\n            \"params\": {\n                \"iterations\": 100,\n                \"learning_rate\": 0.08459525791671796,\n                \"depth\": 9,\n                \"verbose\": False,\n                \"task_type\": \"GPU\",\n                \"devices\": '0:1',\n                \"random_seed\": 42,\n                \"loss_function\": 'Logloss',  # Loss function\n                \"eval_metric\": 'MCC',        # Changed to MCC\n                \"random_strength\": 0,\n                \"l2_leaf_reg\": 0.14883368402592115,\n            }\n        },\n        \"lightgbm\": {\n            \"model\": lgb.LGBMClassifier,\n            \"params\": {\n                'learning_rate': 0.06247152500665574,\n                'lambda_l1': 3.8688184525960296,\n                'lambda_l2': 2.5654275727249365,\n                'max_depth': 13,\n                'colsample_bytree': 0.9043740552495028,\n                'subsample': 0.7630405374363016,\n                'min_child_weight': 4,\n                'num_leaves': 366,\n                'min_child_samples': 40,\n                \"device\": \"gpu\",\n                \"gpu_device_id\": 0,\n                \"max_bin\": 16,\n                \"verbosity\": -1,\n                \"objective\": \"binary\",     # Loss function for binary classification\n                \"metric\": \"mcc\"            # Changed to MCC\n            }\n        }\n    }\n    SEED = 42\n    # Cross-Validation Settings for classification problem\n    CV_STRATEGY = StratifiedKFold(n_splits=5, shuffle=True, random_state=SEED)\n    \n    # MLflow Settings to track the performance of model training\n    MLFLOW_TRACKING_URI = \"https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow\"\n    MLFLOW_EXPERIMENT_NAME = \"Binary Prediction of Poisonous Mushrooms\"\n    DAGSHUB_REPO_OWNER = \"agshiv92\"\n    DAGSHUB_REPO = \"Playground-Series---Season-4-Episode-8\"\n    MLFLOW_URI = \"https://dagshub.com/username/repository_name.mlflow\"\n    MLFLOW_LOCAL_URI = \"/kaggle/working/mlflow\"\n    \n    # Setting seed to ensure reproducibility\n    \n    \n    # Model Save Path \n    MODEL_SAVE_PATH = '/kaggle/working/models'\n    EXPERIMENT_RECORDING = 'REMOTE'\n    \n    #Save time to avoid Model retraining\n    \n    SAVE_TIME = False\n    HYPERPARAMETER_TUNE=True\n\n    ","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:08:40.002493Z","iopub.execute_input":"2024-08-05T04:08:40.002851Z","iopub.status.idle":"2024-08-05T04:08:40.020879Z","shell.execute_reply.started":"2024-08-05T04:08:40.002823Z","shell.execute_reply":"2024-08-05T04:08:40.019920Z"},"trusted":true},"execution_count":104,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"1.3\"></a>\n## <b>1.3 <span style='color:#E1B12D'>Important Functions </span></b> ","metadata":{}},{"cell_type":"code","source":"# Defining some important function which will be used for the analysis of data\ndef inspect_columns(df, df_name):\n    \"\"\"A helper function that does a better job than df.info() and df.describe()\"\"\"\n    \n    total_rows = len(df)\n    result = pd.DataFrame({\n        'total_rows': [total_rows] * df.shape[1],\n        'rows_with_missing_values': df.isnull().sum(),\n        'unique': df.nunique() == total_rows,\n        'cardinality': df.nunique(),\n        'with_null': df.isna().any(),\n        'null_pct': round((df.isnull().sum() / total_rows) * 100, 2),\n        '1st_row': df.iloc[0],\n        'random_row': df.iloc[np.random.randint(low=0, high=total_rows)],\n        'last_row': df.iloc[-1],\n        'dtype': df.dtypes,\n    })\n    \n    # Print the name of the dataframe\n    print(f\"\\n{'='*10} {df_name} {'='*10}\\n\")\n    \n    # Print the head of the dataframe\n    print(\"First few rows of the dataframe:\\n\")\n    display(df.head())\n    \n    # Print the resulting statistics\n    print(\"Detailed statistics:\\n\")\n    display(result)\n    \ndef cast_data_types(df, data_types):\n    \"\"\"A helper function to cast the pre determined data type for the columns in dataframe\"\"\"\n    for column,data_type in data_types.items():\n        if column in df.columns:\n            df[column] = df[column].astype(data_type)\n    return df\n\ndef get_or_create_experiment_id(name):\n    \"\"\"Function to create or get the experiment id\"\"\"\n    exp = mlflow.get_experiment_by_name(name)\n    if exp is None:\n        exp_id = mlflow.create_experiment(name)\n        return exp_id\n    return exp.experiment_id\n\ndef reduce_memory_usage(df):\n    \"\"\"Reduce memory usage of a dataframe by downcasting data types.\"\"\"\n    start_mem = df.memory_usage().sum() / 1024**2\n#     print(f'Memory usage of dataframe is {start_mem:.2f} MB')\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        # Skip timestamp columns\n        if pd.api.types.is_datetime64_any_dtype(df[col]):\n            continue\n        if (col_type != object) & (col_type != object):\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n    \n    end_mem = df.memory_usage().sum() / 1024**2\n#     print(f'Memory usage after optimization is: {end_mem:.2f} MB')\n    print(f'Decreased by {100 * (start_mem - end_mem) / start_mem:.1f}%')\n    return df\n\ndef check_and_create_directory(directory_path):\n    \"\"\" To create directory if not exist\"\"\"\n    if not os.path.exists(directory_path):\n        os.makedirs(directory_path)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:27:50.768889Z","iopub.execute_input":"2024-08-05T02:27:50.769162Z","iopub.status.idle":"2024-08-05T02:27:50.788897Z","shell.execute_reply.started":"2024-08-05T02:27:50.769139Z","shell.execute_reply":"2024-08-05T02:27:50.788021Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"1.4\"></a>\n## <b>1.4 <span style='color:#E1B12D'>Import Data</span></b> ","metadata":{}},{"cell_type":"code","source":"# Load datasets\ntrain_df = pd.read_csv(CFG.TRAIN_PATH)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:27:50.790120Z","iopub.execute_input":"2024-08-05T02:27:50.790475Z","iopub.status.idle":"2024-08-05T02:28:00.271066Z","shell.execute_reply.started":"2024-08-05T02:27:50.790442Z","shell.execute_reply":"2024-08-05T02:28:00.270022Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"1.5\"></a>\n## <b>1.5 <span style='color:#E1B12D'>Quick overview</span></b> ","metadata":{}},{"cell_type":"code","source":"inspect_columns(train_df,\"Training Dataframe\")","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:00.272308Z","iopub.execute_input":"2024-08-05T02:28:00.272623Z","iopub.status.idle":"2024-08-05T02:28:18.131177Z","shell.execute_reply.started":"2024-08-05T02:28:00.272597Z","shell.execute_reply":"2024-08-05T02:28:18.130205Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"\n========== Training Dataframe ==========\n\nFirst few rows of the dataframe:\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"   id class  cap-diameter cap-shape cap-surface cap-color  \\\n0   0     e          8.80         f           s         u   \n1   1     p          4.51         x           h         o   \n2   2     e          6.94         f           s         b   \n3   3     e          3.88         f           y         g   \n4   4     e          5.85         x           l         w   \n\n  does-bruise-or-bleed gill-attachment gill-spacing gill-color  ...  \\\n0                    f               a            c          w  ...   \n1                    f               a            c          n  ...   \n2                    f               x            c          w  ...   \n3                    f               s          NaN          g  ...   \n4                    f               d          NaN          w  ...   \n\n   stem-root  stem-surface stem-color veil-type veil-color has-ring ring-type  \\\n0        NaN           NaN          w       NaN        NaN        f         f   \n1        NaN             y          o       NaN        NaN        t         z   \n2        NaN             s          n       NaN        NaN        f         f   \n3        NaN           NaN          w       NaN        NaN        f         f   \n4        NaN           NaN          w       NaN        NaN        f         f   \n\n  spore-print-color habitat season  \n0               NaN       d      a  \n1               NaN       d      w  \n2               NaN       l      w  \n3               NaN       d      u  \n4               NaN       g      a  \n\n[5 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>class</th>\n      <th>cap-diameter</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>does-bruise-or-bleed</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-color</th>\n      <th>...</th>\n      <th>stem-root</th>\n      <th>stem-surface</th>\n      <th>stem-color</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>has-ring</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>habitat</th>\n      <th>season</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>e</td>\n      <td>8.80</td>\n      <td>f</td>\n      <td>s</td>\n      <td>u</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>p</td>\n      <td>4.51</td>\n      <td>x</td>\n      <td>h</td>\n      <td>o</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>n</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>o</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>t</td>\n      <td>z</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>e</td>\n      <td>6.94</td>\n      <td>f</td>\n      <td>s</td>\n      <td>b</td>\n      <td>f</td>\n      <td>x</td>\n      <td>c</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>s</td>\n      <td>n</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>l</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>e</td>\n      <td>3.88</td>\n      <td>f</td>\n      <td>y</td>\n      <td>g</td>\n      <td>f</td>\n      <td>s</td>\n      <td>NaN</td>\n      <td>g</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>e</td>\n      <td>5.85</td>\n      <td>x</td>\n      <td>l</td>\n      <td>w</td>\n      <td>f</td>\n      <td>d</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>g</td>\n      <td>a</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>"},"metadata":{}},{"name":"stdout","text":"Detailed statistics:\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                      total_rows  rows_with_missing_values  unique  \\\nid                       3116945                         0    True   \nclass                    3116945                         0   False   \ncap-diameter             3116945                         4   False   \ncap-shape                3116945                        40   False   \ncap-surface              3116945                    671023   False   \ncap-color                3116945                        12   False   \ndoes-bruise-or-bleed     3116945                         8   False   \ngill-attachment          3116945                    523936   False   \ngill-spacing             3116945                   1258435   False   \ngill-color               3116945                        57   False   \nstem-height              3116945                         0   False   \nstem-width               3116945                         0   False   \nstem-root                3116945                   2757023   False   \nstem-surface             3116945                   1980861   False   \nstem-color               3116945                        38   False   \nveil-type                3116945                   2957493   False   \nveil-color               3116945                   2740947   False   \nhas-ring                 3116945                        24   False   \nring-type                3116945                    128880   False   \nspore-print-color        3116945                   2849682   False   \nhabitat                  3116945                        45   False   \nseason                   3116945                         0   False   \n\n                      cardinality  with_null  null_pct 1st_row random_row  \\\nid                        3116945      False      0.00       0    1001682   \nclass                           2      False      0.00       e          e   \ncap-diameter                 3913       True      0.00     8.8       8.18   \ncap-shape                      74       True      0.00       f          f   \ncap-surface                    83       True     21.53       s        NaN   \ncap-color                      78       True      0.00       u          g   \ndoes-bruise-or-bleed           26       True      0.00       f          f   \ngill-attachment                78       True     16.81       a          s   \ngill-spacing                   48       True     40.37       c          c   \ngill-color                     63       True      0.00       w          p   \nstem-height                  2749      False      0.00    4.51       6.64   \nstem-width                   5836      False      0.00   15.39      18.37   \nstem-root                      38       True     88.45     NaN          b   \nstem-surface                   60       True     63.55     NaN        NaN   \nstem-color                     59       True      0.00       w          u   \nveil-type                      22       True     94.88     NaN        NaN   \nveil-color                     24       True     87.94     NaN        NaN   \nhas-ring                       23       True      0.00       f          f   \nring-type                      40       True      4.13       f          f   \nspore-print-color              32       True     91.43     NaN        NaN   \nhabitat                        52       True      0.00       d          g   \nseason                          4      False      0.00       a          w   \n\n                     last_row    dtype  \nid                    3116944    int64  \nclass                       p   object  \ncap-diameter              3.2  float64  \ncap-shape                   x   object  \ncap-surface                 s   object  \ncap-color                   g   object  \ndoes-bruise-or-bleed        f   object  \ngill-attachment             d   object  \ngill-spacing                c   object  \ngill-color                  w   object  \nstem-height              2.82  float64  \nstem-width               7.79  float64  \nstem-root                 NaN   object  \nstem-surface              NaN   object  \nstem-color                  w   object  \nveil-type                 NaN   object  \nveil-color                NaN   object  \nhas-ring                    f   object  \nring-type                   f   object  \nspore-print-color         NaN   object  \nhabitat                     g   object  \nseason                      u   object  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_rows</th>\n      <th>rows_with_missing_values</th>\n      <th>unique</th>\n      <th>cardinality</th>\n      <th>with_null</th>\n      <th>null_pct</th>\n      <th>1st_row</th>\n      <th>random_row</th>\n      <th>last_row</th>\n      <th>dtype</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>id</th>\n      <td>3116945</td>\n      <td>0</td>\n      <td>True</td>\n      <td>3116945</td>\n      <td>False</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>1001682</td>\n      <td>3116944</td>\n      <td>int64</td>\n    </tr>\n    <tr>\n      <th>class</th>\n      <td>3116945</td>\n      <td>0</td>\n      <td>False</td>\n      <td>2</td>\n      <td>False</td>\n      <td>0.00</td>\n      <td>e</td>\n      <td>e</td>\n      <td>p</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>cap-diameter</th>\n      <td>3116945</td>\n      <td>4</td>\n      <td>False</td>\n      <td>3913</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>8.8</td>\n      <td>8.18</td>\n      <td>3.2</td>\n      <td>float64</td>\n    </tr>\n    <tr>\n      <th>cap-shape</th>\n      <td>3116945</td>\n      <td>40</td>\n      <td>False</td>\n      <td>74</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>f</td>\n      <td>f</td>\n      <td>x</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>cap-surface</th>\n      <td>3116945</td>\n      <td>671023</td>\n      <td>False</td>\n      <td>83</td>\n      <td>True</td>\n      <td>21.53</td>\n      <td>s</td>\n      <td>NaN</td>\n      <td>s</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>cap-color</th>\n      <td>3116945</td>\n      <td>12</td>\n      <td>False</td>\n      <td>78</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>u</td>\n      <td>g</td>\n      <td>g</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>does-bruise-or-bleed</th>\n      <td>3116945</td>\n      <td>8</td>\n      <td>False</td>\n      <td>26</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>f</td>\n      <td>f</td>\n      <td>f</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>gill-attachment</th>\n      <td>3116945</td>\n      <td>523936</td>\n      <td>False</td>\n      <td>78</td>\n      <td>True</td>\n      <td>16.81</td>\n      <td>a</td>\n      <td>s</td>\n      <td>d</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>gill-spacing</th>\n      <td>3116945</td>\n      <td>1258435</td>\n      <td>False</td>\n      <td>48</td>\n      <td>True</td>\n      <td>40.37</td>\n      <td>c</td>\n      <td>c</td>\n      <td>c</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>gill-color</th>\n      <td>3116945</td>\n      <td>57</td>\n      <td>False</td>\n      <td>63</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>w</td>\n      <td>p</td>\n      <td>w</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>stem-height</th>\n      <td>3116945</td>\n      <td>0</td>\n      <td>False</td>\n      <td>2749</td>\n      <td>False</td>\n      <td>0.00</td>\n      <td>4.51</td>\n      <td>6.64</td>\n      <td>2.82</td>\n      <td>float64</td>\n    </tr>\n    <tr>\n      <th>stem-width</th>\n      <td>3116945</td>\n      <td>0</td>\n      <td>False</td>\n      <td>5836</td>\n      <td>False</td>\n      <td>0.00</td>\n      <td>15.39</td>\n      <td>18.37</td>\n      <td>7.79</td>\n      <td>float64</td>\n    </tr>\n    <tr>\n      <th>stem-root</th>\n      <td>3116945</td>\n      <td>2757023</td>\n      <td>False</td>\n      <td>38</td>\n      <td>True</td>\n      <td>88.45</td>\n      <td>NaN</td>\n      <td>b</td>\n      <td>NaN</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>stem-surface</th>\n      <td>3116945</td>\n      <td>1980861</td>\n      <td>False</td>\n      <td>60</td>\n      <td>True</td>\n      <td>63.55</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>stem-color</th>\n      <td>3116945</td>\n      <td>38</td>\n      <td>False</td>\n      <td>59</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>w</td>\n      <td>u</td>\n      <td>w</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>veil-type</th>\n      <td>3116945</td>\n      <td>2957493</td>\n      <td>False</td>\n      <td>22</td>\n      <td>True</td>\n      <td>94.88</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>veil-color</th>\n      <td>3116945</td>\n      <td>2740947</td>\n      <td>False</td>\n      <td>24</td>\n      <td>True</td>\n      <td>87.94</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>has-ring</th>\n      <td>3116945</td>\n      <td>24</td>\n      <td>False</td>\n      <td>23</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>f</td>\n      <td>f</td>\n      <td>f</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>ring-type</th>\n      <td>3116945</td>\n      <td>128880</td>\n      <td>False</td>\n      <td>40</td>\n      <td>True</td>\n      <td>4.13</td>\n      <td>f</td>\n      <td>f</td>\n      <td>f</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>spore-print-color</th>\n      <td>3116945</td>\n      <td>2849682</td>\n      <td>False</td>\n      <td>32</td>\n      <td>True</td>\n      <td>91.43</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>habitat</th>\n      <td>3116945</td>\n      <td>45</td>\n      <td>False</td>\n      <td>52</td>\n      <td>True</td>\n      <td>0.00</td>\n      <td>d</td>\n      <td>g</td>\n      <td>g</td>\n      <td>object</td>\n    </tr>\n    <tr>\n      <th>season</th>\n      <td>3116945</td>\n      <td>0</td>\n      <td>False</td>\n      <td>4</td>\n      <td>False</td>\n      <td>0.00</td>\n      <td>a</td>\n      <td>w</td>\n      <td>u</td>\n      <td>object</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"\n#### About Data:\n    \nThe dataset provided contains information related to vehicle insurance. Here is a detailed description of the columns:\n\n#### Columns Description\n\n- **id**: Unique identifier for each record.\n- **Gender**: Gender of the insured individual.\n- **Age**: Age of the insured individual.\n- **Driving_License**: Indicator if the individual holds a driving license (1: Yes, 0: No).\n- **Region_Code**: Unique code for the region of the insured individual.\n- **Previously_Insured**: Indicator if the individual was previously insured (1: Yes, 0: No).\n- **Vehicle_Age**: Age of the vehicle ('< 1 Year', '1-2 Year', '> 2 Years').\n- **Vehicle_Damage**: Indicator if the vehicle was damaged previously (Yes/No).\n- **Annual_Premium**: The annual premium amount for the insurance.\n- **Policy_Sales_Channel**: Sales channel through which the policy was sold.\n- **Vintage**: Number of days the customer has been associated with the insurance company.\n- **Response**: Response from the customer (1: Interested, 0: Not interested).","metadata":{}},{"cell_type":"markdown","source":"<a id=\"toc\"></a>\n\n<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n<a id=\"2\"></a>\n## <b>2 <span style='color:#E1B12D'> Exploratory Data Analysis</span></b> ","metadata":{}},{"cell_type":"markdown","source":"TBC","metadata":{}},{"cell_type":"markdown","source":"<a id=\"3\"></a>\n## <b>3 <span style='color:#E1B12D'> Feature Engineering </span></b> \n### <b>3.1 <span style='color:#E1B12D'> Missing Data Handling </span></b> ","metadata":{}},{"cell_type":"code","source":"def fill_missing_values(data):\n    \"\"\"\n    Fill missing values in the DataFrame.\n    \"\"\"\n    for column in data.columns:\n        if data[column].dtype == 'object' or data[column].dtype.name == 'category':\n            # Fill missing values with the mode for categorical variables\n            data[column].fillna(data[column].mode()[0], inplace=True)\n        elif data[column].dtype == 'float64':\n            # Fill missing values with the mean for float variables\n            data[column].fillna(data[column].mean(), inplace=True)\n    return data\ntrain_df = fill_missing_values(train_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:18.132387Z","iopub.execute_input":"2024-08-05T02:28:18.132681Z","iopub.status.idle":"2024-08-05T02:28:28.221156Z","shell.execute_reply.started":"2024-08-05T02:28:18.132656Z","shell.execute_reply":"2024-08-05T02:28:28.220312Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"### Handling Missing Data\n\n1. **Remove Missing Data**\n   - Remove rows with missing values\n   - Remove columns with missing values\n\n2. **Impute Missing Data**\n   - **Mean Imputation**: Replace missing values with the mean.\n   - **Median Imputation**: Replace missing values with the median.\n   - **Mode Imputation**: Replace missing values with the mode.\n   - **Forward Fill**: Replace missing values with the previous value.\n   - **Backward Fill**: Replace missing values with the next value.\n   - **Interpolation**: Use linear interpolation to estimate missing values.\n   - **K-Nearest Neighbors (KNN) Imputation**: Use the nearest neighbors to impute missing values.\n   - **Predictive Imputation**: Use regression or other models to predict missing values.\n","metadata":{}},{"cell_type":"markdown","source":"<a id=\"3.2\"></a>\n### <b>3.2 <span style='color:#E1B12D'> Outlier Handling </span></b> ","metadata":{}},{"cell_type":"markdown","source":"<a id=\"3.3\"></a>\n### <b>3.3 <span style='color:#E1B12D'> Feature Transformation </span></b> ","metadata":{}},{"cell_type":"markdown","source":"#### 3.3.0 Data Prepration\nData prepration by giving appropriate column name and converting the data in appropriate data type","metadata":{}},{"cell_type":"code","source":"def data_prepration(df):\n    df = reduce_memory_usage(df)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:28.222414Z","iopub.execute_input":"2024-08-05T02:28:28.223186Z","iopub.status.idle":"2024-08-05T02:28:28.227614Z","shell.execute_reply.started":"2024-08-05T02:28:28.223151Z","shell.execute_reply":"2024-08-05T02:28:28.226757Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"#### 3.3.1 One Hot Encoding\n\nI have chosen to avoid one-hot encoding for categorical variables. Instead, I will be leveraging advanced machine learning algorithms like LightGBM, which natively support categorical data. This decision is driven by three key factors:- Efficiency, Performance and \nSimplicity","metadata":{}},{"cell_type":"code","source":"# def one_hot_encode_train(train_df, categorical_columns):\n#     encoder = OneHotEncoder(drop='first', sparse=False)\n#     encoded_df = encoder.fit_transform(train_df[categorical_columns])\n#     encoded_df = pd.DataFrame(encoded_df, columns=encoder.get_feature_names_out(categorical_columns))\n#     train_df = train_df.drop(columns=categorical_columns).reset_index(drop=True)\n#     train_df = pd.concat([train_df, encoded_df], axis=1)\n#     joblib.dump(encoder, 'encoder.pkl')  # Save the fitted encoder to a file\n#     return train_df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:28.228724Z","iopub.execute_input":"2024-08-05T02:28:28.228992Z","iopub.status.idle":"2024-08-05T02:28:28.240440Z","shell.execute_reply.started":"2024-08-05T02:28:28.228969Z","shell.execute_reply":"2024-08-05T02:28:28.239500Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"def map_target(df):\n    vehicle_age_mapping = {'e': 0, 'p': 1}\n    df['class'] = df['class'].map(vehicle_age_mapping)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:28.241568Z","iopub.execute_input":"2024-08-05T02:28:28.241853Z","iopub.status.idle":"2024-08-05T02:28:28.252721Z","shell.execute_reply.started":"2024-08-05T02:28:28.241829Z","shell.execute_reply":"2024-08-05T02:28:28.251846Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"#### 3.3.2 Standard Scaler\nLagged features are the demand in previouse week for the same product and client. This feature is helpful to understand the dempendency of the demand on previous history","metadata":{}},{"cell_type":"code","source":"# def standard_scale_train(train_df, numerical_columns):\n#     scaler = StandardScaler()\n#     train_df[numerical_columns] = scaler.fit_transform(train_df[numerical_columns])\n#     joblib.dump(scaler, 'scaler.pkl')  # Save the fitted scaler to a file\n#     return train_df\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:28.253867Z","iopub.execute_input":"2024-08-05T02:28:28.254227Z","iopub.status.idle":"2024-08-05T02:28:28.263271Z","shell.execute_reply.started":"2024-08-05T02:28:28.254157Z","shell.execute_reply":"2024-08-05T02:28:28.262475Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"#### 3.3.3 Rolling Features\nRolling features capture the aggregated values over a specific window of time, such as the average or sum of demand over the past few weeks. These features are instrumental in understanding trends and patterns in the data.\n","metadata":{}},{"cell_type":"markdown","source":"<a id=\"3.4\"></a>\n### <b>3.4 <span style='color:#E1B12D'> Feature Creation </span></b> ","metadata":{}},{"cell_type":"code","source":"numerical_cols = CFG.NUMERICAL_VARIABLES\ncategorical_cols = CFG.CATEGORICAL_VARIABLES\ntrain_df = data_prepration(train_df)\n# train_df = one_hot_encode_train(train_df, categorical_cols)\ntrain_df = map_target(train_df)\nfor col in categorical_cols:\n    train_df[col] = train_df[col].astype('category')\ntrain_df = train_df.drop('id',axis=1)\n\n# train_df = standard_scale_train(train_df, numerical_cols)\n# train_df['Region_Code'] = train_df['Region_Code'].astype('int')\n# train_df['Region_Code'] = train_df['Region_Code'].astype('category')\n# train_df['Driving_License'] = train_df['Driving_License'].astype('category')\n# train_df['Previously_Insured'] = train_df['Previously_Insured'].astype('category')\n# train_df['Vehicle_Damage_Yes'] = train_df['Vehicle_Damage_Yes'].astype('category')\n# train_df['Gender_Male'] = train_df['Gender_Male'].astype('category')\n# gc.collect()","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:28.268661Z","iopub.execute_input":"2024-08-05T02:28:28.268963Z","iopub.status.idle":"2024-08-05T02:28:32.581627Z","shell.execute_reply.started":"2024-08-05T02:28:28.268942Z","shell.execute_reply":"2024-08-05T02:28:32.580546Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Decreased by 84.1%\n","output_type":"stream"}]},{"cell_type":"markdown","source":"<a id=\"3.5\"></a>\n### <b>3.5 <span style='color:#E1B12D'> Feature Selection </span></b> ","metadata":{}},{"cell_type":"code","source":"numeric_columns = [col for col in train_df.columns if col not in CFG.CATEGORICAL_VARIABLES]\ncorr_matrix = train_df.head(10000)[numeric_columns].corr()\n# Plot the heatmap\nplt.figure(figsize=(20, 16))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\nplt.title('Correlation Matrix with Heatmap')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:32.582784Z","iopub.execute_input":"2024-08-05T02:28:32.583074Z","iopub.status.idle":"2024-08-05T02:28:33.036606Z","shell.execute_reply.started":"2024-08-05T02:28:32.583046Z","shell.execute_reply":"2024-08-05T02:28:33.035665Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x1600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# def clean_column_names(columns):\n#     \"\"\"Clean column names by replacing problematic characters.\"\"\"\n#     return [col.replace('[', '').replace(']', '').replace('<', '').replace('>', '') for col in columns]\n\n# def feature_selection(df, CFG, number_of_features):\n#     \"\"\"Perform feature selection using XGBoost feature importances for classification\"\"\"\n#     sample_df = df.sample(frac=0.05, random_state=CFG.SEED)\n#     X = sample_df.drop(columns=CFG.TARGET_VARIABLE)\n#     y = sample_df[CFG.TARGET_VARIABLE]\n\n#     # Clean column names\n#     X.columns = clean_column_names(X.columns)\n\n#     model = xgb.XGBClassifier(n_estimators=100, random_state=CFG.SEED, tree_method='hist')\n\n#     # Fit the model\n#     model.fit(X, y)\n#     importances = model.feature_importances_\n#     indices = np.argsort(importances)[::-1]\n\n#     # Print the feature ranking\n#     print(\"Feature ranking:\")\n#     feature_ranking = [(X.columns[indices[f]], importances[indices[f]]) for f in range(X.shape[1])]\n#     for rank, (feature, importance) in enumerate(feature_ranking, start=1):\n#         print(f\"{rank}. feature {feature} ({importance})\")\n\n#     # Get the top features\n#     selected_features = X.columns[indices[:number_of_features]]  # Adjust the number of features as needed\n#     print(\"Selected Features by XGBoost:\", selected_features)\n\n#     return selected_features\n\n# # Assuming train_df and CFG are defined as before\n# selected_features = feature_selection(train_df, CFG, 16)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:33.037968Z","iopub.execute_input":"2024-08-05T02:28:33.038803Z","iopub.status.idle":"2024-08-05T02:28:33.044672Z","shell.execute_reply.started":"2024-08-05T02:28:33.038768Z","shell.execute_reply":"2024-08-05T02:28:33.043644Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# def selected_features_dataframe(df,selected_features):\n#     \"\"\"Select the important features from dataframe\"\"\"\n#     selected_features = list(selected_features)\n#     selected_features.append(CFG.TARGET_VARIABLE)\n#     df=df[selected_features]\n#     return df \n# train_df = selected_features_dataframe(train_df,selected_features)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:33.045919Z","iopub.execute_input":"2024-08-05T02:28:33.046253Z","iopub.status.idle":"2024-08-05T02:28:33.059646Z","shell.execute_reply.started":"2024-08-05T02:28:33.046221Z","shell.execute_reply":"2024-08-05T02:28:33.058746Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"toc\"></a>\n\n<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n<a id=\"4\"></a>\n## <b>4 <span style='color:#E1B12D'> Data Pipeline </span></b> \n### <b>4.1 <span style='color:#E1B12D'> Pipeline Creation </span></b> ","metadata":{}},{"cell_type":"code","source":"def preprocess_train_data(train_df, numerical_columns, categorical_columns):\n    train_df = map_target(train_df)\n\n    # Standard Scaling\n    train_df = standard_scale_train(train_df, numerical_columns)\n    # One-Hot Encoding\n    train_df = one_hot_encode_train(train_df, categorical_columns)\n    # Add Interaction Features\n    train_df = add_interaction_features(train_df, 'Age', 'Annual_Premium')\n    train_df = add_interaction_features(train_df, 'Age', 'Vintage')\n    return train_df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:33.060712Z","iopub.execute_input":"2024-08-05T02:28:33.060982Z","iopub.status.idle":"2024-08-05T02:28:33.070814Z","shell.execute_reply.started":"2024-08-05T02:28:33.060944Z","shell.execute_reply":"2024-08-05T02:28:33.069966Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"def preprocess_test_data(test_df, numerical_columns, categorical_columns):\n    # Map Vehicle Age\n#     test_df = map_target(test_df)\n    for col in categorical_cols:\n        test_df[col] = test_df[col].astype('category')\n#     test_df = test_df.drop('id',axis=1)\n    test_df = fill_missing_values(test_df)\n\n    # Load and apply Standard Scaler\n#     scaler = joblib.load('scaler.pkl')\n#     test_df[numerical_columns] = scaler.transform(test_df[numerical_columns])\n\n#     # Load and apply One-Hot Encoder\n#     encoder = joblib.load('encoder.pkl')\n#     encoded_df = encoder.transform(test_df[categorical_columns])\n#     encoded_df = pd.DataFrame(encoded_df, columns=encoder.get_feature_names_out(categorical_columns))\n#     test_df = test_df.drop(columns=categorical_columns).reset_index(drop=True)\n#     test_df = pd.concat([test_df, encoded_df], axis=1)\n\n#     # Add Interaction Features\n#     test_df = add_interaction_features(test_df, 'Age', 'Annual_Premium')\n#     test_df = add_interaction_features(test_df, 'Age', 'Vintage')\n#     test_df['Region_Code'] = test_df['Region_Code'].astype('int')\n#     test_df['Region_Code'] = test_df['Region_Code'].astype('category')\n#     test_df['Vehicle_Age'] = test_df['Vehicle_Age'].astype('category')\n    return test_df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:33.072188Z","iopub.execute_input":"2024-08-05T02:28:33.072604Z","iopub.status.idle":"2024-08-05T02:28:33.084432Z","shell.execute_reply.started":"2024-08-05T02:28:33.072572Z","shell.execute_reply":"2024-08-05T02:28:33.083479Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"4.2\"></a>\n### <b>4.2 <span style='color:#E1B12D'> Visualizing the Pipeline </span></b> ","metadata":{}},{"cell_type":"markdown","source":"<a id=\"toc\"></a>\n\n<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n<a id=\"5\"></a>\n## <b>5 <span style='color:#E1B12D'> Model Building </span></b> \n### <b>5.1 <span style='color:#E1B12D'> Train Test Split </span></b> ","metadata":{}},{"cell_type":"code","source":"def prepare_train_test_data(df, target_column, test_size=0.05, random_state=42):\n    \"\"\"Splits the data into training and testing sets.\"\"\"\n    X = df.drop(columns=target_column)\n    y = df[target_column]\n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state, stratify=y)\n    return X_train, y_train, X_test, y_test","metadata":{"execution":{"iopub.status.busy":"2024-08-05T03:07:50.905220Z","iopub.execute_input":"2024-08-05T03:07:50.905603Z","iopub.status.idle":"2024-08-05T03:07:50.911251Z","shell.execute_reply.started":"2024-08-05T03:07:50.905574Z","shell.execute_reply":"2024-08-05T03:07:50.910221Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"X_train, y_train, X_test, y_test = prepare_train_test_data(train_df, target_column='class')\n# del train_df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T03:46:31.372163Z","iopub.execute_input":"2024-08-05T03:46:31.372703Z","iopub.status.idle":"2024-08-05T03:46:32.895261Z","shell.execute_reply.started":"2024-08-05T03:46:31.372672Z","shell.execute_reply":"2024-08-05T03:46:32.894339Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"5.2\"></a>\n### <b>5.2 <span style='color:#E1B12D'> Training the Model </span></b> ","metadata":{}},{"cell_type":"code","source":"# Initiating for Experiment tracking\ncheck_and_create_directory(CFG.MODEL_SAVE_PATH) # to create directory to save models\ncheck_and_create_directory(CFG.MLFLOW_LOCAL_URI) # to create directory for experiment tracking\nif CFG.EXPERIMENT_RECORDING =='LOCAL':\n    mlflow.set_tracking_uri(CFG.MLFLOW_LOCAL_URI)\nelse:\n    dagshub.init(CFG.DAGSHUB_REPO, CFG.DAGSHUB_REPO_OWNER, mlflow=True)\nexperiment_id = get_or_create_experiment_id(CFG.MLFLOW_EXPERIMENT_NAME)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:29:39.754005Z","iopub.execute_input":"2024-08-05T02:29:39.754441Z","iopub.status.idle":"2024-08-05T02:29:44.437884Z","shell.execute_reply.started":"2024-08-05T02:29:39.754408Z","shell.execute_reply":"2024-08-05T02:29:44.437065Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"                                       \u001b[1m❗❗❗ AUTHORIZATION REQUIRED ❗❗❗\u001b[0m                                        \n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">                                       <span style=\"font-weight: bold\">❗❗❗ AUTHORIZATION REQUIRED ❗❗❗</span>                                        \n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Output()","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"name":"stdout","text":"\n\nOpen the following link in your browser to authorize the client:\nhttps://dagshub.com/login/oauth/authorize?state=daec83f0-f607-4c09-a006-b1979cc3788c&client_id=32b60ba385aa7cecf24046d8195a71c07dd345d9657977863b52e7748e0f0f28&middleman_request_id=e55a120d4531a2e13fc30b4f8ee23b9dc779727a29b61f685ff3ebb4287308a5\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Accessing as agshiv92\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Accessing as agshiv92\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Initialized MLflow to track repo \u001b[32m\"agshiv92/Playground-Series---Season-4-Episode-8\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"agshiv92/Playground-Series---Season-4-Episode-8\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Repository agshiv92/Playground-Series---Season-\u001b[1;36m4\u001b[0m-Episode-\u001b[1;36m8\u001b[0m initialized!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository agshiv92/Playground-Series---Season-<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span>-Episode-<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8</span> initialized!\n</pre>\n"},"metadata":{}}]},{"cell_type":"markdown","source":"#### <b>5.2.1 <span style='color:#E1B12D'> Hyperparameter Tuning </span></b> \n#### 5.2.1.1 XGB Training","metadata":{}},{"cell_type":"code","source":"# Define the objective function for Optuna optimization\ndef objective(trial):\n    # Define hyperparameters to tune\n    param = {\n        'grow_policy': trial.suggest_categorical('grow_policy', [\"depthwise\", \"lossguide\"]),\n        'multi_strategy': trial.suggest_categorical('multi_strategy', [\"one_output_per_tree\"]),\n        'learning_rate': trial.suggest_float('learning_rate', 0.005, 0.1),\n        'gamma': trial.suggest_float('gamma', 1e-5, 0.5, log=True),\n        'subsample': trial.suggest_float('subsample', 0.3, 1.0),\n        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.3, 1.0),\n        'max_depth': trial.suggest_int('max_depth', 3, 15),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 7),\n        'lambda': trial.suggest_float('lambda', 1e-3, 10.0, log=True),\n        'alpha': trial.suggest_float('alpha', 1e-3, 10.0, log=True),\n    }\n    param['n_estimators'] = 100\n    param['early_stopping_rounds'] = 10\n    param['booster'] = 'gbtree'\n    param[\"verbosity\"] = 0\n    param['tree_method'] = \"gpu_hist\"\n    param[\"enable_categorical\"] = True\n    param[\"objective\"] = 'binary:logistic' \n    \n    mcc_scores = []\n    \n    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n    for train_idx, valid_idx in cv.split(X_train, y_train):\n        X_train_fold, X_valid_fold = X_train.iloc[train_idx], X_train.iloc[valid_idx]\n        y_train_fold, y_valid_fold = y_train.iloc[train_idx], y_train.iloc[valid_idx]\n        \n        # Create and fit the model\n        model = XGBClassifier(**param)\n        model.fit(X_train_fold, y_train_fold, eval_set=[(X_valid_fold, y_valid_fold)], verbose=False)\n        \n        # Predict class probabilities\n        y_prob = model.predict_proba(X_valid_fold)[:, 1]  # Get the probabilities for the positive class\n        \n        # Compute the MCC\n        y_pred = (y_prob > 0.5).astype(int)\n        mcc = matthews_corrcoef(y_valid_fold, y_pred)\n        mcc_scores.append(mcc)\n    \n    # Average MCC score across all folds\n    avg_mcc = np.mean(mcc_scores)\n    \n    # Log parameters, metrics, and model name to MLflow\n    with mlflow.start_run(nested=True):\n        mlflow.log_param(\"model\", \"XGBClassifier\")\n        mlflow.log_params(param)\n        mlflow.log_metric(\"avg_mcc\", avg_mcc)\n    \n    return avg_mcc\n\n# Example usage of Optuna for hyperparameter tuning\nif CFG.HYPERPARAMETER_TUNE:\n    mlflow.set_experiment(\"xgb_model_training\")\n    study = optuna.create_study(direction='maximize', study_name=\"xgb_model_training\")\n    \n    with mlflow.start_run() as run:\n        study.optimize(objective, n_trials=10)  # Adjust the number of trials as necessary\n        \n        # Output the optimization results\n        print(f\"Best trial average MCC: {study.best_value:.4f}\")\n        print(study.best_params)\n        for key, value in study.best_params.items():\n            print(f\"{key}: {value}\")\n        \n        # Log the best parameters, metric, and model name to MLflow\n        mlflow.log_param(\"model\", \"XGBClassifier\")\n        mlflow.log_params(study.best_params)\n        mlflow.log_metric(\"best_mcc\", study.best_value)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T03:46:55.167200Z","iopub.execute_input":"2024-08-05T03:46:55.167609Z","iopub.status.idle":"2024-08-05T04:05:29.343502Z","shell.execute_reply.started":"2024-08-05T03:46:55.167576Z","shell.execute_reply":"2024-08-05T04:05:29.342564Z"},"trusted":true},"execution_count":102,"outputs":[{"name":"stderr","text":"[I 2024-08-05 03:46:55,348] A new study created in memory with name: xgb_model_training\n2024/08/05 03:48:37 INFO mlflow.tracking._tracking_service.client: 🏃 View run sincere-swan-676 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/1c5e7176218c47e6be2afc6b020626fc.\n2024/08/05 03:48:37 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 03:48:37,959] Trial 0 finished with value: 0.9791352358118282 and parameters: {'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.05011585029537325, 'gamma': 0.00019637344640176086, 'subsample': 0.4134295213652416, 'colsample_bytree': 0.7390779964930314, 'max_depth': 10, 'min_child_weight': 6, 'lambda': 0.023195910388645498, 'alpha': 0.029964500964103323}. Best is trial 0 with value: 0.9791352358118282.\n2024/08/05 03:51:33 INFO mlflow.tracking._tracking_service.client: 🏃 View run wise-deer-278 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/64c8235eb8514bbb919f13b24e909395.\n2024/08/05 03:51:33 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 03:51:33,993] Trial 1 finished with value: 0.9831244197758935 and parameters: {'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.09747122412142832, 'gamma': 0.13264201040313653, 'subsample': 0.8134886357726392, 'colsample_bytree': 0.4424880614011609, 'max_depth': 12, 'min_child_weight': 3, 'lambda': 0.002490355061571145, 'alpha': 0.07664306664553507}. Best is trial 1 with value: 0.9831244197758935.\n2024/08/05 03:52:08 INFO mlflow.tracking._tracking_service.client: 🏃 View run agreeable-wasp-246 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/e3a9ceb0c68d47879f7d21f3a868e675.\n2024/08/05 03:52:08 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 03:52:08,293] Trial 2 finished with value: 0.9506218795585021 and parameters: {'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.07566223366708691, 'gamma': 0.008932269859846187, 'subsample': 0.8554475007156195, 'colsample_bytree': 0.5453562787189505, 'max_depth': 5, 'min_child_weight': 6, 'lambda': 1.3144925738671622, 'alpha': 0.0017640205778666595}. Best is trial 1 with value: 0.9831244197758935.\n2024/08/05 03:54:36 INFO mlflow.tracking._tracking_service.client: 🏃 View run big-ray-102 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/e0742f7056a740e6b37dee618b8f2c44.\n2024/08/05 03:54:36 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 03:54:37,139] Trial 3 finished with value: 0.9796322247508886 and parameters: {'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.031076433806435315, 'gamma': 0.00022455072872175051, 'subsample': 0.686748939674485, 'colsample_bytree': 0.33687861446866263, 'max_depth': 13, 'min_child_weight': 1, 'lambda': 0.001173053435244186, 'alpha': 2.2207177422230773}. Best is trial 1 with value: 0.9831244197758935.\n2024/08/05 03:55:04 INFO mlflow.tracking._tracking_service.client: 🏃 View run sedate-chimp-351 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/1b3ee3c63aa34957a624f86e5fd43e2c.\n2024/08/05 03:55:04 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 03:55:04,905] Trial 4 finished with value: 0.8266777310287543 and parameters: {'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.06182114821452787, 'gamma': 0.02329729909433537, 'subsample': 0.8143027932181905, 'colsample_bytree': 0.45423081641442054, 'max_depth': 3, 'min_child_weight': 2, 'lambda': 0.003097348562735187, 'alpha': 0.017133840821948527}. Best is trial 1 with value: 0.9831244197758935.\n2024/08/05 04:00:24 INFO mlflow.tracking._tracking_service.client: 🏃 View run grandiose-foal-827 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/22a55fbd4cfc41659888faa5da36e070.\n2024/08/05 04:00:24 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 04:00:25,134] Trial 5 finished with value: 0.9832905011695126 and parameters: {'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.08328331858001327, 'gamma': 0.004835250985829998, 'subsample': 0.8859736601374597, 'colsample_bytree': 0.5888026455458519, 'max_depth': 13, 'min_child_weight': 1, 'lambda': 0.019400390218703555, 'alpha': 0.021729650485307506}. Best is trial 5 with value: 0.9832905011695126.\n2024/08/05 04:01:05 INFO mlflow.tracking._tracking_service.client: 🏃 View run salty-snipe-59 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/f463cfc39be84fe8b86574b9595240de.\n2024/08/05 04:01:05 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 04:01:05,776] Trial 6 finished with value: 0.982394389368074 and parameters: {'grow_policy': 'depthwise', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.09201496822933082, 'gamma': 0.46123582296356386, 'subsample': 0.5464324914395293, 'colsample_bytree': 0.4637299982363241, 'max_depth': 10, 'min_child_weight': 3, 'lambda': 0.25138380466323984, 'alpha': 0.05183691148497917}. Best is trial 5 with value: 0.9832905011695126.\n2024/08/05 04:01:53 INFO mlflow.tracking._tracking_service.client: 🏃 View run nebulous-bug-935 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/b1207bb309344f3fb91ec37b1dbf2ebb.\n2024/08/05 04:01:53 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 04:01:54,128] Trial 7 finished with value: 0.9824151637184096 and parameters: {'grow_policy': 'depthwise', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.07615745481525299, 'gamma': 4.69240225894767e-05, 'subsample': 0.844300127772077, 'colsample_bytree': 0.8324007957527397, 'max_depth': 12, 'min_child_weight': 7, 'lambda': 0.0825385808545326, 'alpha': 0.0012160517767413218}. Best is trial 5 with value: 0.9832905011695126.\n2024/08/05 04:04:22 INFO mlflow.tracking._tracking_service.client: 🏃 View run useful-mouse-38 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/b60f0288ae694fbdbf7c3db24d7f5482.\n2024/08/05 04:04:22 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 04:04:22,557] Trial 8 finished with value: 0.9821153773804262 and parameters: {'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.05836538971123069, 'gamma': 0.00020945262840960056, 'subsample': 0.3477368052482885, 'colsample_bytree': 0.5546327526539256, 'max_depth': 12, 'min_child_weight': 1, 'lambda': 3.0763573742699837, 'alpha': 0.006546659719179845}. Best is trial 5 with value: 0.9832905011695126.\n2024/08/05 04:05:28 INFO mlflow.tracking._tracking_service.client: 🏃 View run legendary-lark-458 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/41aaf40798124f6e912555f93cb3a083.\n2024/08/05 04:05:28 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n[I 2024-08-05 04:05:28,481] Trial 9 finished with value: 0.9827096755489835 and parameters: {'grow_policy': 'depthwise', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.06615563498407803, 'gamma': 1.442385353898068e-05, 'subsample': 0.9231863990386937, 'colsample_bytree': 0.8429083226109284, 'max_depth': 14, 'min_child_weight': 7, 'lambda': 0.009968917400195862, 'alpha': 0.0030975648736592263}. Best is trial 5 with value: 0.9832905011695126.\n","output_type":"stream"},{"name":"stdout","text":"Best trial average MCC: 0.9833\n{'grow_policy': 'lossguide', 'multi_strategy': 'one_output_per_tree', 'learning_rate': 0.08328331858001327, 'gamma': 0.004835250985829998, 'subsample': 0.8859736601374597, 'colsample_bytree': 0.5888026455458519, 'max_depth': 13, 'min_child_weight': 1, 'lambda': 0.019400390218703555, 'alpha': 0.021729650485307506}\ngrow_policy: lossguide\nmulti_strategy: one_output_per_tree\nlearning_rate: 0.08328331858001327\ngamma: 0.004835250985829998\nsubsample: 0.8859736601374597\ncolsample_bytree: 0.5888026455458519\nmax_depth: 13\nmin_child_weight: 1\nlambda: 0.019400390218703555\nalpha: 0.021729650485307506\n","output_type":"stream"},{"name":"stderr","text":"2024/08/05 04:05:29 INFO mlflow.tracking._tracking_service.client: 🏃 View run aged-calf-546 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/fdf69cceb04a4b5eb4d60e701cc844c9.\n2024/08/05 04:05:29 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### 5.2.1.2 LGBM Training","metadata":{}},{"cell_type":"code","source":"# Define the objective function for Optuna optimization\ndef objective(trial):\n    # Define parameters to be optimized for the LGBMClassifier\n    param = {\n        'objective': 'binary',\n        'learning_rate': trial.suggest_float('learning_rate', 0.005, 0.1),\n        'n_estimators': 100,\n        'lambda_l1': trial.suggest_float('lambda_l1', 1e-8, 10.0, log=True),\n        'lambda_l2': trial.suggest_float('lambda_l2', 1e-8, 10.0, log=True),\n        'max_depth': trial.suggest_int('max_depth', 3, 15),\n        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.3, 1.0),\n        'subsample': trial.suggest_float('subsample', 0.5, 1.0),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 8),\n        'device_type': 'gpu',\n        'num_leaves': trial.suggest_int('num_leaves', 4, 2048),\n        \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n        \"verbosity\": -1,\n        \"early_stopping_rounds\": 50,\n    }\n\n    mcc_scores = []\n\n    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n    for train_idx, valid_idx in cv.split(X_train, y_train):\n        X_train_fold, X_valid_fold = X_train.iloc[train_idx], X_train.iloc[valid_idx]\n        y_train_fold, y_valid_fold = y_train.iloc[train_idx], y_train.iloc[valid_idx]\n\n        # Create and fit the model\n        model = LGBMClassifier(**param)\n        model.fit(X_train_fold, y_train_fold, eval_set=[(X_valid_fold, y_valid_fold)])\n\n        # Predict class probabilities\n        y_prob = model.predict_proba(X_valid_fold)[:, 1]  # Get the probabilities for the positive class\n\n        # Convert probabilities to binary predictions\n        y_pred = (y_prob > 0.5).astype(int)\n\n        # Compute the MCC\n        mcc = matthews_corrcoef(y_valid_fold, y_pred)\n        mcc_scores.append(mcc)\n\n    # Average MCC score across all folds\n    avg_mcc = np.mean(mcc_scores)\n    \n    # Log parameters, metrics, and model name to MLflow\n    with mlflow.start_run(nested=True):\n        mlflow.log_param(\"model\", \"LGBMClassifier\")\n        mlflow.log_params(param)\n        mlflow.log_metric(\"avg_mcc\", avg_mcc)\n    \n    return avg_mcc\n\n# Run Optuna optimization\nif CFG.HYPERPARAMETER_TUNE:\n    mlflow.set_experiment(\"lgbm_model_training\")\n    study = optuna.create_study(direction='maximize', study_name=\"lgbm_model_training\")\n    \n    with mlflow.start_run() as run:\n        study.optimize(objective, n_trials=10)  # Adjust the number of trials as necessary\n        \n        # Output the optimization results\n        print(f\"Best trial average MCC: {study.best_value:.4f}\")\n        print(study.best_params)\n        for key, value in study.best_params.items():\n            print(f\"{key}: {value}\")\n        \n        # Log the best parameters, metric, and model name to MLflow\n        mlflow.log_param(\"model\", \"LGBMClassifier\")\n        mlflow.log_params(study.best_params)\n        mlflow.log_metric(\"best_mcc\", study.best_value)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:29:51.646627Z","iopub.execute_input":"2024-08-05T02:29:51.647278Z","iopub.status.idle":"2024-08-05T02:29:51.662000Z","shell.execute_reply.started":"2024-08-05T02:29:51.647245Z","shell.execute_reply":"2024-08-05T02:29:51.660865Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"#### 5.2.1.3 Catboost Training","metadata":{}},{"cell_type":"code","source":"def objective(trial):\n    # Define parameters to be optimized for the CatBoostClassifier\n    param = {\n        \"loss_function\": \"Logloss\",\n        \"eval_metric\": \"Logloss\",\n        \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.005, 0.1),\n        'n_estimators': 100,\n        \"l2_leaf_reg\": trial.suggest_float(\"l2_leaf_reg\", 0.001, 10.0, log=True),\n        \"depth\": trial.suggest_int(\"depth\", 4, 10),\n        \"subsample\": trial.suggest_float(\"subsample\", 0.4, 1.0),\n        \"bootstrap_type\": \"Bernoulli\",\n        \"early_stopping_rounds\": 100,\n        \"task_type\": 'GPU',\n        \"verbose\": False\n    }\n\n    mcc_scores = []\n\n    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n    for train_idx, valid_idx in cv.split(X_train, y_train):\n        X_train_fold, X_valid_fold = X_train.iloc[train_idx], X_train.iloc[valid_idx]\n        y_train_fold, y_valid_fold = y_train.iloc[train_idx], y_train.iloc[valid_idx]\n\n        # Create and fit the model\n        model = CatBoostClassifier(**param)\n        model.fit(X_train_fold, y_train_fold, eval_set=[(X_valid_fold, y_valid_fold)], cat_features=CFG.CATEGORICAL_VARIABLES)\n\n        # Predict class probabilities\n        y_prob = model.predict_proba(X_valid_fold)[:, 1]  # Get the probabilities for the positive class\n\n        # Convert probabilities to binary predictions\n        y_pred = (y_prob > 0.5).astype(int)\n\n        # Compute the MCC\n        mcc = matthews_corrcoef(y_valid_fold, y_pred)\n        mcc_scores.append(mcc)\n\n    # Average MCC score across all folds\n    avg_mcc = np.mean(mcc_scores)\n    \n    # Log parameters, metrics, and model name to MLflow\n    with mlflow.start_run(nested=True):\n        mlflow.log_param(\"model\", \"CatBoostClassifier\")\n        mlflow.log_params(param)\n        mlflow.log_metric(\"avg_mcc\", avg_mcc)\n    \n    return avg_mcc\n\nif CFG.HYPERPARAMETER_TUNE:\n    mlflow.set_experiment(\"catboost_model_training\")\n    study = optuna.create_study(direction='maximize', study_name=\"catboost_model_training\")\n    \n    with mlflow.start_run() as run:\n        study.optimize(objective, n_trials=10)  # Adjust the number of trials as necessary\n        \n        # Output the optimization results\n        print(f\"Best trial average MCC: {study.best_value:.4f}\")\n        print(study.best_params)\n        for key, value in study.best_params.items():\n            print(f\"{key}: {value}\")\n        \n        # Log the best parameters, metric, and model name to MLflow\n        mlflow.log_param(\"model\", \"CatBoostClassifier\")\n        mlflow.log_params(study.best_params)\n        mlflow.log_metric(\"best_mcc\", study.best_value)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:29:53.521757Z","iopub.execute_input":"2024-08-05T02:29:53.522594Z","iopub.status.idle":"2024-08-05T02:29:53.535102Z","shell.execute_reply.started":"2024-08-05T02:29:53.522561Z","shell.execute_reply":"2024-08-05T02:29:53.534213Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"if CFG.SAVE_TIME:\n    pass\nelse:\n    experiment_name = \"xgb_model_training\"\n    mlflow.set_experiment(experiment_name)\n    experiment_id = mlflow.get_experiment_by_name(experiment_name).experiment_id\n    runs = mlflow.search_runs(experiment_ids=[experiment_id])\n    best_run = runs.loc[runs['metrics.best_mcc'].idxmax()]\n    best_run_id = best_run['run_id']\n    client = mlflow.tracking.MlflowClient()\n    best_run = client.get_run(best_run_id)\n    best_params = best_run.data.params\n    print(\"Best Parameters:\")\n    for key, value in best_params.items():\n        print(f\"{key}: {value}\")\n\n    # You can also convert the parameters to a dictionary if needed\n    best_params_dict = dict(best_params)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T03:04:44.566435Z","iopub.execute_input":"2024-08-05T03:04:44.567083Z","iopub.status.idle":"2024-08-05T03:04:45.330627Z","shell.execute_reply.started":"2024-08-05T03:04:44.567052Z","shell.execute_reply":"2024-08-05T03:04:45.329655Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"Best Parameters:\ngrow_policy: lossguide\nmulti_strategy: one_output_per_tree\nlearning_rate: 0.09732225349195871\ngamma: 0.0036288191283343377\nsubsample: 0.6421085741580573\ncolsample_bytree: 0.9754143928702466\nmax_depth: 14\nmin_child_weight: 4\nlambda: 3.2008898511150754\nalpha: 0.004541087073661065\nmodel: XGBClassifier\n","output_type":"stream"}]},{"cell_type":"code","source":"best_params_dict","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:48.427170Z","iopub.status.idle":"2024-08-05T02:28:48.427518Z","shell.execute_reply.started":"2024-08-05T02:28:48.427329Z","shell.execute_reply":"2024-08-05T02:28:48.427358Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if CFG.SAVE_TIME:\n    pass\nelse:\n    def train_and_evaluate(model_config, X_train, y_train, experiment_id, save_best_model=True, save_dir=CFG.MODEL_SAVE_PATH, categorical_features=CFG.CATEGORICAL_VARIABLES):\n            \"\"\"\n            Train and evaluate a model using time series cross-validation for classification.\n            \"\"\"\n            skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=CFG.SEED)\n            cv_scores = []\n            best_score = float('-inf')\n            best_model = None\n            model_type = model_config['model'].__name__\n            model = model_config['model'](**model_config['params'])\n\n            with mlflow.start_run(experiment_id=experiment_id):\n                mlflow.log_param(\"model_name\", model_type)\n                for train_idx, val_idx in skf.split(X_train, y_train):\n                    X_train_fold, X_val_fold = X_train.iloc[train_idx], X_train.iloc[val_idx]\n                    y_train_fold, y_val_fold = y_train.iloc[train_idx], y_train.iloc[val_idx]\n\n                    # Clone and train the model\n                    fold_model = clone(model)\n                    if model_type == 'LGBMClassifier':\n                        fold_model.fit(X_train_fold, y_train_fold)\n                    elif model_type == 'XGBClassifier':\n                        fold_model.fit(X_train_fold, y_train_fold, eval_set=[(X_val_fold, y_val_fold)], verbose=False)\n                    elif model_type == 'CatBoostClassifier':\n                        fold_model.fit(X_train_fold, y_train_fold, eval_set=[(X_val_fold, y_val_fold)], cat_features=categorical_features, early_stopping_rounds=10, verbose=False)\n                    else:\n                        fold_model.fit(X_train_fold, y_train_fold)\n\n                    # Evaluate the model\n                    y_val_pred = fold_model.predict_proba(X_val_fold)[:, 1]\n                    y_val_pred = (y_val_pred >= 0.5).astype(int)\n                    val_mcc = matthews_corrcoef(y_val_fold, y_val_pred)\n                    cv_scores.append(val_mcc)\n                    mlflow.log_metric(f\"val_roc_auc_fold_{len(cv_scores)}\", val_mcc)\n\n                    # Check if the current fold's model is the best one for this algorithm\n                    if val_mcc > best_score:\n                        best_score = val_mcc\n                        best_model = fold_model\n\n                mlflow.log_params(model_config['params'])\n                mlflow.log_metric(\"best_val_mcc\", best_score)\n\n            # Save the best model for this algorithm\n            if save_best_model:\n                best_model_filename = f\"{model_type}_best_model.joblib\"\n                best_model_save = os.path.join(save_dir, experiment_id)\n                check_and_create_directory(best_model_save)\n                joblib.dump(best_model, os.path.join(best_model_save, best_model_filename))\n                print(f\"Best model ({model_type}) with MCC {best_score:.4f} saved to {best_model_filename}\")\n\n            return np.mean(cv_scores)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:38:36.149164Z","iopub.execute_input":"2024-08-05T02:38:36.149547Z","iopub.status.idle":"2024-08-05T02:38:36.163530Z","shell.execute_reply.started":"2024-08-05T02:38:36.149516Z","shell.execute_reply":"2024-08-05T02:38:36.162423Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"if CFG.SAVE_TIME:\n    pass\nelse:\n    for model_name, model_config in CFG.MODELS.items():\n        print(f\"Training and evaluating model: {model_name}\")\n        average_rmse = train_and_evaluate(model_config, X_train, y_train,experiment_id)\n        print(f\"MCC for {model_name}: {average_rmse:.3f}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:08:57.145731Z","iopub.execute_input":"2024-08-05T04:08:57.146452Z","iopub.status.idle":"2024-08-05T04:18:42.583790Z","shell.execute_reply.started":"2024-08-05T04:08:57.146420Z","shell.execute_reply":"2024-08-05T04:18:42.582798Z"},"trusted":true},"execution_count":105,"outputs":[{"name":"stdout","text":"Training and evaluating model: xgboost\n","output_type":"stream"},{"name":"stderr","text":"2024/08/05 04:14:07 INFO mlflow.tracking._tracking_service.client: 🏃 View run abundant-ape-95 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/c5415dbe0ad145c388a8fea801cddf68.\n2024/08/05 04:14:07 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n","output_type":"stream"},{"name":"stdout","text":"Best model (XGBClassifier) with MCC 0.9835 saved to XGBClassifier_best_model.joblib\nMCC for xgboost: 0.983\nTraining and evaluating model: catboost\n","output_type":"stream"},{"name":"stderr","text":"2024/08/05 04:15:59 INFO mlflow.tracking._tracking_service.client: 🏃 View run sincere-cow-530 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/eb299a81d6da400d9e75f3d975e626ba.\n2024/08/05 04:15:59 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n","output_type":"stream"},{"name":"stdout","text":"Best model (CatBoostClassifier) with MCC 0.9773 saved to CatBoostClassifier_best_model.joblib\nMCC for catboost: 0.976\nTraining and evaluating model: lightgbm\n","output_type":"stream"},{"name":"stderr","text":"2024/08/05 04:18:42 INFO mlflow.tracking._tracking_service.client: 🏃 View run classy-owl-72 at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1/runs/aec792c88f914d079e9321b59abf53a5.\n2024/08/05 04:18:42 INFO mlflow.tracking._tracking_service.client: 🧪 View experiment at: https://dagshub.com/agshiv92/Playground-Series---Season-4-Episode-8.mlflow/#/experiments/1.\n","output_type":"stream"},{"name":"stdout","text":"Best model (LGBMClassifier) with MCC 0.9813 saved to LGBMClassifier_best_model.joblib\nMCC for lightgbm: 0.981\n","output_type":"stream"}]},{"cell_type":"markdown","source":"<a id=\"5.3\"></a>\n### <b>5.3 <span style='color:#E1B12D'>  Performance Evaluation </span></b> ","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score, roc_curve, auc\ndef load_and_evaluate_models(model_directory, X_test, y_test, experiment_id):\n    \"\"\"Evaluate the Performance of Various Models using Test Data\"\"\"\n    model_files = [f for f in os.listdir(os.path.join(model_directory, experiment_id)) if f.endswith('.joblib')]\n\n    results = []\n\n    # Iterate over the found model files\n    for model_file in model_files:\n        # Load the model\n        model_path = os.path.join(model_directory, experiment_id, model_file)\n        model = joblib.load(model_path)\n        print(f\"Loaded model from {model_path}\")\n\n        # Predict on the test set\n        y_test_pred_proba = model.predict_proba(X_test)[:, 1]\n\n        # Calculate the threshold that maximizes MCC on the test set\n        fpr, tpr, thresholds = roc_curve(y_test, y_test_pred_proba)\n        j_scores = tpr - fpr\n        optimal_idx = j_scores.argmax()\n        optimal_threshold = thresholds[optimal_idx]\n        y_test_pred = (y_test_pred_proba >= optimal_threshold).astype(int)\n        test_mcc = matthews_corrcoef(y_test, y_test_pred)\n\n        # Evaluate the model on the test set\n        test_roc_auc = roc_auc_score(y_test, y_test_pred_proba)\n        print(f'Test ROC AUC: {test_roc_auc}')\n        print(f'Test MCC: {test_mcc}')\n        print(f'Optimal Threshold: {optimal_threshold}')\n\n        # Store the results in the list\n        results.append({\n            'Model': model_file,\n            'ROC AUC': test_roc_auc,\n            'MCC': test_mcc,\n            'Optimal Threshold': optimal_threshold\n        })\n\n        # Plot ROC curve\n        plt.figure(figsize=(10, 6))\n        plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {test_roc_auc:.2f})')\n        plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n        plt.xlim([0.0, 1.0])\n        plt.ylim([0.0, 1.05])\n        plt.xlabel('False Positive Rate')\n        plt.ylabel('True Positive Rate')\n        plt.title(f'Receiver Operating Characteristic - {model_file}')\n        plt.legend(loc='lower right')\n        plt.show()\n\n    del model\n\n    # Convert the list of results to a DataFrame\n    results_df = pd.DataFrame(results)\n\n    return results_df\n\n# Assuming model_directory, X_test, y_test, and experiment_id are defined\nmodel_directory = CFG.MODEL_SAVE_PATH\nresults = load_and_evaluate_models(model_directory, X_test, y_test, experiment_id)\n\n\n# Display the evaluation results\nprint(results)\n\n# Cleanup after execution\ndel X_train\ndel y_train\ngc.collect()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T03:26:58.101964Z","iopub.execute_input":"2024-08-05T03:26:58.102649Z","iopub.status.idle":"2024-08-05T03:27:02.505216Z","shell.execute_reply.started":"2024-08-05T03:26:58.102607Z","shell.execute_reply":"2024-08-05T03:27:02.504297Z"},"trusted":true},"execution_count":59,"outputs":[{"name":"stdout","text":"Loaded model from /kaggle/working/models/1/CatBoostClassifier_best_model.joblib\nTest ROC AUC: 0.9964774103378252\nTest MCC: 0.977446378217203\nOptimal Threshold: 0.46464795825192556\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Loaded model from /kaggle/working/models/1/LGBMClassifier_best_model.joblib\nTest ROC AUC: 0.9969490003604176\nTest MCC: 0.9816872971757752\nOptimal Threshold: 0.5164716220642288\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Loaded model from /kaggle/working/models/1/XGBClassifier_best_model.joblib\nTest ROC AUC: 0.9972662491096196\nTest MCC: 0.9832339726274698\nOptimal Threshold: 0.6265913844108582\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"                                  Model   ROC AUC       MCC  Optimal Threshold\n0  CatBoostClassifier_best_model.joblib  0.996477  0.977446           0.464648\n1      LGBMClassifier_best_model.joblib  0.996949  0.981687           0.516472\n2       XGBClassifier_best_model.joblib  0.997266  0.983234           0.626591\n","output_type":"stream"},{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"8540"},"metadata":{}}]},{"cell_type":"markdown","source":"<a id=\"5.4\"></a>\n### <b>5.4 <span style='color:#E1B12D'> Ensembling for Performance Improvement </span></b> ","metadata":{}},{"cell_type":"code","source":"def load_models(model_directory):\n    \"\"\"Load all models from the specified directory.\"\"\"\n    models = {}\n    for model_name in ['XGBClassifier_best', 'CatBoostClassifier_best', 'LGBMClassifier_best']:\n        file_path = os.path.join(model_directory, f\"{model_name}_model.joblib\")\n        models[model_name] = joblib.load(file_path)\n    return models\n\n# Directory where models are saved\nmodel_directory = '/kaggle/working/models/' + experiment_id\n\n# Load models\nmodels = load_models(model_directory)\n\noptimal_thresholds = {\n    'CatBoostClassifier_best': 0.464648,\n    'XGBClassifier_best': 0.826591,\n    'LGBMClassifier_best': 0.516472\n}\n\ndef objective(trial):\n    \"\"\"Enhance the performance of ensembling and optimizing weights.\"\"\"\n    # Suggest weights for each model\n    w_catboost = trial.suggest_float('w_catboost', 0, 1)\n    w_xgboost = trial.suggest_float('w_xgboost', 0, 1)\n    w_lightgbm = trial.suggest_float('w_lightgbm', 0, 1)\n    \n    # Normalize weights so they sum to 1\n    total = w_catboost + w_xgboost + w_lightgbm\n    w_catboost /= total\n    w_xgboost /= total\n    w_lightgbm /= total\n    \n    # Collect individual model predictions\n    y_pred_cat = models['CatBoostClassifier_best'].predict_proba(X_test)[:, 1]\n    y_pred_xgb = models['XGBClassifier_best'].predict_proba(X_test)[:, 1]\n    y_pred_lgb = models['LGBMClassifier_best'].predict_proba(X_test)[:, 1]\n\n    # Combine predictions based on the weights\n    y_pred = (w_catboost * y_pred_cat + w_xgboost * y_pred_xgb + w_lightgbm * y_pred_lgb)\n    \n    # Convert probabilities to binary predictions using a threshold (e.g., 0.5)\n    y_pred_binary_cat = (y_pred_cat >= optimal_thresholds['CatBoostClassifier_best']).astype(int)\n    y_pred_binary_xgb = (y_pred_xgb >= optimal_thresholds['XGBClassifier_best']).astype(int)\n    y_pred_binary_lgb = (y_pred_lgb >= optimal_thresholds['LGBMClassifier_best']).astype(int)\n    y_pred_binary = (w_catboost * y_pred_binary_cat + w_xgboost * y_pred_binary_xgb + w_lightgbm * y_pred_binary_lgb) >= 0.5\n    # Calculate and return the MCC score\n    mcc = matthews_corrcoef(y_test, y_pred_binary)\n    return mcc\n\n# Set up Optuna study\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=30)\n\n# Retrieve the best weights\nbest_weights = {\n    'CatBoostClassifier_best': study.best_trial.params['w_catboost'],\n    'XGBClassifier_best': study.best_trial.params['w_xgboost'],\n    'LGBMClassifier_best': study.best_trial.params['w_lightgbm']\n}\ntotal = sum(best_weights.values())\nbest_weights = {model: weight / total for model, weight in best_weights.items()}\nprint(\"Best weights:\", best_weights)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:25:48.984150Z","iopub.execute_input":"2024-08-05T04:25:48.984919Z","iopub.status.idle":"2024-08-05T04:26:47.749437Z","shell.execute_reply.started":"2024-08-05T04:25:48.984886Z","shell.execute_reply":"2024-08-05T04:26:47.748496Z"},"trusted":true},"execution_count":143,"outputs":[{"name":"stderr","text":"[I 2024-08-05 04:25:50,156] A new study created in memory with name: no-name-6cb58901-212b-4f0b-bd10-62124d2b2330\n[I 2024-08-05 04:25:52,027] Trial 0 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.47385048099321236, 'w_xgboost': 0.3035700223073621, 'w_lightgbm': 0.3708698202756755}. Best is trial 0 with value: 0.9815684755958108.\n[I 2024-08-05 04:25:53,896] Trial 1 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.26243176867582285, 'w_xgboost': 0.22983166936468558, 'w_lightgbm': 0.9342574710689038}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:25:55,786] Trial 2 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.09365844834332782, 'w_xgboost': 0.07483627760174538, 'w_lightgbm': 0.3562291652885585}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:25:57,665] Trial 3 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.5594483666346206, 'w_xgboost': 0.6749540235663263, 'w_lightgbm': 0.7520632096978846}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:25:59,550] Trial 4 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.26371919543569655, 'w_xgboost': 0.17534866770742996, 'w_lightgbm': 0.8690416711005449}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:01,425] Trial 5 finished with value: 0.977446378217203 and parameters: {'w_catboost': 0.862725142533486, 'w_xgboost': 0.34037710614984296, 'w_lightgbm': 0.3058708774277408}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:03,805] Trial 6 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.7613024002029856, 'w_xgboost': 0.08444914135166248, 'w_lightgbm': 0.7269905309636112}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:05,715] Trial 7 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.8113123424945055, 'w_xgboost': 0.5732341316543469, 'w_lightgbm': 0.8642177033054464}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:07,582] Trial 8 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.5692635619142358, 'w_xgboost': 0.5680445513149318, 'w_lightgbm': 0.680969260188113}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:09,457] Trial 9 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.2881391085289037, 'w_xgboost': 0.12069967015545457, 'w_lightgbm': 0.6052401256845852}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:11,339] Trial 10 finished with value: 0.9801005185472925 and parameters: {'w_catboost': 0.011346953535808724, 'w_xgboost': 0.9958327985777662, 'w_lightgbm': 8.902514278530393e-05}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:13,231] Trial 11 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.1224799967835945, 'w_xgboost': 0.010273046740557096, 'w_lightgbm': 0.3938582712250996}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:15,166] Trial 12 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.2807480850422053, 'w_xgboost': 0.33360960411839646, 'w_lightgbm': 0.13561154466990022}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:17,055] Trial 13 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.11794963777040107, 'w_xgboost': 0.2271527785829225, 'w_lightgbm': 0.9684736201458735}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:18,935] Trial 14 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.4087706188928264, 'w_xgboost': 0.43999418501372045, 'w_lightgbm': 0.5129957893558033}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:20,832] Trial 15 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.018709646708390065, 'w_xgboost': 0.004488394138858154, 'w_lightgbm': 0.18806608055049107}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:22,716] Trial 16 finished with value: 0.9801005185472925 and parameters: {'w_catboost': 0.17220006471038052, 'w_xgboost': 0.8655365370108958, 'w_lightgbm': 0.5417692139588528}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:24,625] Trial 17 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.3619270309198763, 'w_xgboost': 0.19841204978284468, 'w_lightgbm': 0.2826512695808666}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:26,524] Trial 18 finished with value: 0.977446378217203 and parameters: {'w_catboost': 0.9712277151913964, 'w_xgboost': 0.4384331329368349, 'w_lightgbm': 0.42666217640349546}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:28,412] Trial 19 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.17691942801340738, 'w_xgboost': 0.2584897024285622, 'w_lightgbm': 0.947328702219613}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:30,297] Trial 20 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.6578330302896629, 'w_xgboost': 0.1044944632023703, 'w_lightgbm': 0.6309557334030786}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:32,222] Trial 21 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.26116044543978184, 'w_xgboost': 0.18711518133248856, 'w_lightgbm': 0.8627006962181103}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:34,369] Trial 22 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.37449181720042185, 'w_xgboost': 0.13111322717951135, 'w_lightgbm': 0.8055503044941423}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:36,318] Trial 23 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.24394678213783094, 'w_xgboost': 0.39893358126001666, 'w_lightgbm': 0.9972521989469426}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:38,214] Trial 24 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.0854218952278688, 'w_xgboost': 0.030399138737986928, 'w_lightgbm': 0.9036132782017109}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:40,110] Trial 25 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.22016472073737406, 'w_xgboost': 0.20454291282438583, 'w_lightgbm': 0.7963637667621538}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:41,997] Trial 26 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.46017388638309353, 'w_xgboost': 0.2877993255651756, 'w_lightgbm': 0.46787297154719865}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:43,906] Trial 27 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.3471253050246267, 'w_xgboost': 0.1606440661667325, 'w_lightgbm': 0.20879908440705636}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:45,850] Trial 28 finished with value: 0.981674410961068 and parameters: {'w_catboost': 0.05929655539452766, 'w_xgboost': 0.08097947397498824, 'w_lightgbm': 0.5758842140236395}. Best is trial 1 with value: 0.981674410961068.\n[I 2024-08-05 04:26:47,744] Trial 29 finished with value: 0.9815684755958108 and parameters: {'w_catboost': 0.4591526334588253, 'w_xgboost': 0.35787471669482424, 'w_lightgbm': 0.3303689120600165}. Best is trial 1 with value: 0.981674410961068.\n","output_type":"stream"},{"name":"stdout","text":"Best weights: {'CatBoostClassifier_best': 0.1839662966031539, 'XGBClassifier_best': 0.16111342490463124, 'LGBMClassifier_best': 0.6549202784922149}\n","output_type":"stream"}]},{"cell_type":"code","source":"def predict_ensemble(X_test, model_directory, best_weights, threshold=optimal_thresholds):\n    \"\"\"\n    Make predictions using an ensemble of pre-trained models and specified weights.\n    Returns binary predictions based on a threshold.\n    \"\"\"\n    models = load_models(model_directory)\n\n    # Collect individual model predictions\n    y_pred_cat = models['CatBoostClassifier_best'].predict_proba(X_test)[:, 1]\n    y_pred_xgb = models['XGBClassifier_best'].predict_proba(X_test)[:, 1]\n    y_pred_lgb = models['LGBMClassifier_best'].predict_proba(X_test)[:, 1]\n    \n    y_pred_binary_cat = (y_pred_cat >= thresholds['CatBoostClassifier_best']).astype(int)\n    y_pred_binary_xgb = (y_pred_xgb >= thresholds['XGBClassifier_best']).astype(int)\n    y_pred_binary_lgb = (y_pred_lgb >= thresholds['LGBMClassifier_best']).astype(int)\n\n    # Combine predictions based on the weights\n    y_pred_proba = (best_weights['CatBoostClassifier_best'] * y_pred_cat +\n                    best_weights['XGBClassifier_best'] * y_pred_xgb +\n                    best_weights['LGBMClassifier_best'] * y_pred_lgb)\n\n    # Convert probabilities to binary predictions using the threshold\n    y_pred_binary = (best_weights['CatBoostClassifier_best'] * y_pred_binary_cat +\n                     best_weights['XGBClassifier_best'] * y_pred_binary_xgb +\n                     best_weights['LGBMClassifier_best'] * y_pred_binary_lgb) >= 0.5\n    y_pred_binary = y_pred_binary.astype(int)\n    return y_pred_binary, y_pred_proba","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:26:55.020894Z","iopub.execute_input":"2024-08-05T04:26:55.021252Z","iopub.status.idle":"2024-08-05T04:26:55.029750Z","shell.execute_reply.started":"2024-08-05T04:26:55.021223Z","shell.execute_reply":"2024-08-05T04:26:55.028876Z"},"trusted":true},"execution_count":145,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"5.5\"></a>\n### <b>5.5 <span style='color:#E1B12D'> Model Explainablity </span></b> ","metadata":{}},{"cell_type":"code","source":"# def model_explainability(model_directory, X_test):\n#     \"\"\"Provide the importance of Features in the Model\"\"\"\n#     shap_values_dict = {}\n#     X_test_sampled = X_test.sample(frac=0.005)  # Ensure variable naming consistency\n#     models = load_models(model_directory)\n#     for name, model in models.items():\n#         print(f\"Explaining model: {name}\")\n#         if 'catboost' in name.lower():\n#             explainer = shap.TreeExplainer(model, feature_perturbation='interventional', check_additivity=False)\n#             shap_values = explainer(X_test_sampled, check_additivity=False)\n#         elif 'xgb' in name.lower() or 'lgbm' in name.lower():\n#             explainer = shap.TreeExplainer(model, check_additivity=False)\n#             shap_values = explainer(X_test_sampled, check_additivity=False)\n#         else:\n#             explainer = shap.Explainer(model)\n#             shap_values = explainer.shap_values(X_test_sampled)\n#         if isinstance(shap_values, list):\n#             shap_values = shap_values[1]  # For binary classification, use the positive class SHAP values\n        \n#         # Ensure feature names are passed correctly\n        \n#         shap_values_dict[name] = shap_values\n        \n#         # Plot summary plot for the current model\n#         shap.summary_plot(shap_values, X_test_sampled, show=False)\n#         plt.title(f\"SHAP Summary Plot for {name}\")\n#         plt.show()\n        \n#         # Plot feature importance bar chart for the current model\n#         shap.plots.bar(shap_values, show=False)\n#         plt.title(f\"SHAP Feature Importance for {name}\")\n#         plt.show()\n    \n#     return shap_values_dict\n\n# # Example usage\n# shap_values_dict = model_explainability(model_directory, X_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:26:55.954733Z","iopub.execute_input":"2024-08-05T04:26:55.955098Z","iopub.status.idle":"2024-08-05T04:26:55.960678Z","shell.execute_reply.started":"2024-08-05T04:26:55.955069Z","shell.execute_reply":"2024-08-05T04:26:55.959723Z"},"trusted":true},"execution_count":146,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"toc\"></a>\n\n<a href=\"#toc\" style=\"background-color: #E1B12D; color: #ffffff; padding: 7px 10px; text-decoration: none; border-radius: 50px;\">Back to top</a><a id=\"toc\"></a>\n<a id=\"6\"></a>\n## <b>6 <span style='color:#E1B12D'> Model Inference </span></b> \n<a id=\"6.1\"></a>\n### <b>6.1 <span style='color:#E1B12D'> Loading the Model </span></b> ","metadata":{}},{"cell_type":"code","source":"def predict_ensemble(X_test, model_directory, best_weights, thresholds=optimal_thresholds):\n    \"\"\"\n    Make predictions using an ensemble of pre-trained models and specified weights.\n    Returns binary predictions based on a threshold.\n    \"\"\"\n    models = load_models(model_directory)\n\n    # Collect individual model predictions\n    y_pred_cat = models['CatBoostClassifier_best'].predict_proba(X_test)[:, 1]\n    y_pred_xgb = models['XGBClassifier_best'].predict_proba(X_test)[:, 1]\n    y_pred_lgb = models['LGBMClassifier_best'].predict_proba(X_test)[:, 1]\n    \n    y_pred_binary_cat = (y_pred_cat >= thresholds['CatBoostClassifier_best']).astype(int)\n    y_pred_binary_xgb = (y_pred_xgb >= thresholds['XGBClassifier_best']).astype(int)\n    y_pred_binary_lgb = (y_pred_lgb >= thresholds['LGBMClassifier_best']).astype(int)\n\n    # Combine predictions based on the weights\n    y_pred_proba = (best_weights['CatBoostClassifier_best'] * y_pred_cat +\n                    best_weights['XGBClassifier_best'] * y_pred_xgb +\n                    best_weights['LGBMClassifier_best'] * y_pred_lgb)\n\n    # Convert probabilities to binary predictions using the threshold\n    y_pred_binary = (best_weights['CatBoostClassifier_best'] * y_pred_binary_cat +\n                     best_weights['XGBClassifier_best'] * y_pred_binary_xgb +\n                     best_weights['LGBMClassifier_best'] * y_pred_binary_lgb) >= 0.5\n    y_pred_binary = y_pred_binary.astype(int)\n\n    return y_pred_binary\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:26:56.599900Z","iopub.execute_input":"2024-08-05T04:26:56.600766Z","iopub.status.idle":"2024-08-05T04:26:56.608817Z","shell.execute_reply.started":"2024-08-05T04:26:56.600732Z","shell.execute_reply":"2024-08-05T04:26:56.607913Z"},"trusted":true},"execution_count":147,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"6.2\"></a>\n### <b>6.2 <span style='color:#E1B12D'> Data Loading and Prepration </span></b> \n#### 6.2.1 Reading the data","metadata":{}},{"cell_type":"code","source":"test_df = pd.read_csv(CFG.TEST_PATH)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:26:57.357031Z","iopub.execute_input":"2024-08-05T04:26:57.357600Z","iopub.status.idle":"2024-08-05T04:27:01.634297Z","shell.execute_reply.started":"2024-08-05T04:26:57.357567Z","shell.execute_reply":"2024-08-05T04:27:01.633239Z"},"trusted":true},"execution_count":148,"outputs":[]},{"cell_type":"markdown","source":"#### 6.2.2 Processing the Data","metadata":{}},{"cell_type":"code","source":"test_df_preprocessed = preprocess_test_data(test_df, numerical_cols, categorical_cols)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:27:01.635911Z","iopub.execute_input":"2024-08-05T04:27:01.636225Z","iopub.status.idle":"2024-08-05T04:27:06.143951Z","shell.execute_reply.started":"2024-08-05T04:27:01.636198Z","shell.execute_reply":"2024-08-05T04:27:06.143090Z"},"trusted":true},"execution_count":149,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"6.3\"></a>\n### <b>6.3 <span style='color:#E1B12D'> Model Forecasting </span></b> ","metadata":{}},{"cell_type":"code","source":"def reverse_map_target(df):\n    reverse_mapping = {0: 'e', 1: 'p'}  # Assuming 'e' and 'p' are the original classes\n    df['class'] = df['class'].map(reverse_mapping)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:27:06.145177Z","iopub.execute_input":"2024-08-05T04:27:06.145547Z","iopub.status.idle":"2024-08-05T04:27:06.150725Z","shell.execute_reply.started":"2024-08-05T04:27:06.145514Z","shell.execute_reply":"2024-08-05T04:27:06.149859Z"},"trusted":true},"execution_count":150,"outputs":[]},{"cell_type":"code","source":"def prediction(df):\n    # Assuming 'id' column is still available in the test_df_preprocessed\n    id_column = test_df_preprocessed['id']\n    \n    df = df.drop('id', axis=1)\n    y_pred = predict_ensemble(df, model_directory, best_weights,optimal_thresholds )        \n    df['class'] = y_pred\n    \n    # Assign the 'id' values from test_df_preprocessed back to df\n    df['id'] = id_column\n    df = df[['id','class']]\n    df = reverse_map_target(df)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:27:06.152742Z","iopub.execute_input":"2024-08-05T04:27:06.153008Z","iopub.status.idle":"2024-08-05T04:27:06.162203Z","shell.execute_reply.started":"2024-08-05T04:27:06.152985Z","shell.execute_reply":"2024-08-05T04:27:06.161453Z"},"trusted":true},"execution_count":151,"outputs":[]},{"cell_type":"code","source":"test_df = prediction(test_df_preprocessed)\ntest_df.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:27:06.163186Z","iopub.execute_input":"2024-08-05T04:27:06.164094Z","iopub.status.idle":"2024-08-05T04:27:32.166171Z","shell.execute_reply.started":"2024-08-05T04:27:06.164050Z","shell.execute_reply":"2024-08-05T04:27:32.165190Z"},"trusted":true},"execution_count":152,"outputs":[]},{"cell_type":"code","source":"len(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:27:32.167666Z","iopub.execute_input":"2024-08-05T04:27:32.167955Z","iopub.status.idle":"2024-08-05T04:27:32.173757Z","shell.execute_reply.started":"2024-08-05T04:27:32.167929Z","shell.execute_reply":"2024-08-05T04:27:32.172915Z"},"trusted":true},"execution_count":153,"outputs":[{"execution_count":153,"output_type":"execute_result","data":{"text/plain":"2077964"},"metadata":{}}]},{"cell_type":"code","source":"test_df['class'].hist()","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:27:32.174869Z","iopub.execute_input":"2024-08-05T04:27:32.175136Z","iopub.status.idle":"2024-08-05T04:27:33.296222Z","shell.execute_reply.started":"2024-08-05T04:27:32.175113Z","shell.execute_reply":"2024-08-05T04:27:33.295373Z"},"trusted":true},"execution_count":154,"outputs":[{"execution_count":154,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"train_df['class'].hist()","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:21:56.507296Z","iopub.execute_input":"2024-08-05T04:21:56.508171Z","iopub.status.idle":"2024-08-05T04:21:56.831732Z","shell.execute_reply.started":"2024-08-05T04:21:56.508140Z","shell.execute_reply":"2024-08-05T04:21:56.830857Z"},"trusted":true},"execution_count":121,"outputs":[{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Mlflow Local UI","metadata":{}},{"cell_type":"code","source":"# if CFG.EXPERIMENT_RECORDING == 'LOCAL':\n#     !pip install mlflow --quiet\n#     !pip install pyngrok --quiet\n    \n#     from pyngrok import ngrok\n#     from getpass import getpass\n\n#     ngrok.kill()\n\n#     # Setting the authtoken (replace with your own token from https://dashboard.ngrok.com/auth)\n#     NGROK_AUTH_TOKEN = \"2ioyKWLGBeFWH5D7vI5ktAJaZSV_2aUaXGdGJeHsk43qWXRvk\"\n#     ngrok.set_auth_token(NGROK_AUTH_TOKEN)\n\n#     # Start the MLflow UI\n#     get_ipython().system_raw(\"mlflow ui --backend-store-uri file:/kaggle/working/mlflow --host 0.0.0.0 --port 5000 &\")\n\n#     # Open an HTTPs tunnel on port 5000 for http://localhost:5000\n#     ngrok_tunnel = ngrok.connect(addr=\"5000\", proto=\"http\", bind_tls=True)\n#     print(\"MLflow Tracking UI:\", ngrok_tunnel.public_url)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-05T02:28:48.450694Z","iopub.status.idle":"2024-08-05T02:28:48.451133Z","shell.execute_reply.started":"2024-08-05T02:28:48.450906Z","shell.execute_reply":"2024-08-05T02:28:48.450924Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}